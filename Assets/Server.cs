using System.Collections.Generic;
using System.IO;
using UnityEngine;

public class Server : MonoBehaviour
{
    private string player;
    private string host;
    System.Diagnostics.Process process;

    public string GetPlayer()
    {
        return PlayerPrefs.GetString("PLAYER") ?? player;
    }
    public string GetHost()
    {
        return PlayerPrefs.GetString("SERVER") ?? host;
    }
    public string GetHttpScheme()
    {
#if UNITY_EDITOR
        return "http";
#else
        return "https";
#endif
    }
    public string GetWsScheme()
    {
#if UNITY_EDITOR
        return "ws";
#else
        return "wss";
#endif
    }
    public Dictionary<string, string> GetHeaders()
    {
        var headers = new Dictionary<string, string>();
        //headers.Add("Cookie", "sessionid=<placeholder>");
        return headers;
    }

    void Start()
    {
        player = PlayerPrefs.GetString("PLAYER") ?? player;
        host = PlayerPrefs.GetString("SERVER") ?? host;
        if (host == null || host == "")
        {
            string relativePath = "";
#if UNITY_EDITOR
            relativePath = "..";
#endif
            System.Diagnostics.ProcessStartInfo start = new System.Diagnostics.ProcessStartInfo();
            //python interprater location
            start.EnvironmentVariables["PATH"] = PlayerPrefs.GetString("PYTHON_PATH") + ":$PATH";
            start.FileName = Path.Join(Application.dataPath, relativePath, "/Server/manage.py").ToString();
            //argument with file name and input parameters
            start.WorkingDirectory = Path.Join(Application.dataPath, relativePath, "Server");
            start.Arguments = "runserver";
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            start.LoadUserProfile = true;
            process = System.Diagnostics.Process.Start(start);
            LogServer(this);
            host = "localhost:8000";
        }
        Debug.Log("Server " + host);
    }

    private async void LogServer(Server self)
    {
        while (!process.HasExited)
        {
            string line = await process.StandardError.ReadLineAsync();
            if (line != null)
                Debug.Log(line, self);
        }
        process.Close();
    }

    void OnApplicationQuit()
    {
        Destroy();
    }

    void Destroy()
    {
        if (process != null)
            process.CloseMainWindow();
    }
}